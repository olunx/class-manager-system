-------------------------------------
0，SVN的基本用法(fatkun)
-------------------------------------
	1.每次commit前update一下没坏处~
	2.新建的文件需要add进来才会上传或者在commit时选择non-version的文件
	3.当出现很奇异的问题时，最最有效最无耻的方法是把本地文件删除，然后update（注意保留自己修改的部分）
-------------------------------------
1，SVN冲突处理(fatkun)
-------------------------------------
	1.update一下，冲突的文件会有“！”（叹号的图形）
	2.在冲突的文件右键，可以查看"Diff"比较服务器与本地文件的差异
	3.修改本地文件，手工合并自己和服务器版本，选择resolve保持自己的版本。或者放弃自己修改，resolve选择服务器的版本。
	4.commit或update
-------------------------------------
2，SVN回滚到某个版本(fatkun)
-------------------------------------
	1.show log查看想恢复到那个版本
	2.update到最新版
	3.Merge(合并),参数可填入"73-77"即想从73版本到77版本合并起来一个版本
	4.检查没错后commit
-------------------------------------
3，hibernate数据库乱码(fatkun)
-------------------------------------
	1.确保新建的数据库编码为utf-8
	2.jdbc.url 属性改为“jdbc:mysql://localhost:3306/classmis?characterEncoding=utf-8”
	3.Hibernate.cfg.xml加入以下代码
		<property name="connection.useUnicode">true</property>
		<property name="connection.characterEncoding">UTF-8</property>
-------------------------------------
4，classes文件夹生成(fatkun)
-------------------------------------
	1.在菜单“Project->Clean”就可以重新编译了（如果还不生成请检查配置）
	
-------------------------------------
5，改变Myeclipse默认的JSP打开方式
-------------------------------------
	1.在设置里“preferences->General->editors->Files Associations”设置*.jsp打开方式为Myeclipse Web Editor为默认(default)
	
-------------------------------------
6，使用Spring的CharacterEncodingFilter应注意的问题 
-------------------------------------
	应该把它放在Struts的前面，否则会出现乱码
	<!-- spring Encode -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
-------------------------------------
7，配置OpenSessionInViewFilter（解决Hibernate懒加载带来的问题）
-------------------------------------
	在web.xml下加入
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!--配置OpenSessionInView，为了避免Hibernate的延迟加载产生问题-->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	--------------------------
	
	spring配置文件下，一定要配置事务，不然会出现写数据库时错误 
	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean>

	<!-- 配置事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="allMethod" expression="execution(* cn.gdpu.dao.impl.*.*(..))" />
		<aop:pointcut id="allServiceMethod" expression="execution(* cn.gdpu.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="allMethod" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
	</aop:config>
-------------------------------------
8，hibernate中映射text类型
-------------------------------------
	当内容超过定义的长度，错误：org.springframework.dao.DataIntegrityViolationException
	使用text可以输入更多的文字
	<property name="content" type="text"/>
-------------------------------------
9，使用验证框架 validation
-------------------------------------
	建立个XXXAction-validation.xml(XXXAction是Action的文件名)
	<?xml version="1.0" encoding="UTF-8" ?> 
	<!DOCTYPE validators PUBLIC 
	          "-//OpenSymphony Group//XWork Validator 1.0//EN" 
	          "http://www.opensymphony.com/xwork/xwork-validator-1.0.dtd" >
	<validators>
		<field name="title">
			<field-validator type="requiredstring">
				<param name="trim">true</param>
				<message>标题必须填写</message>
			</field-validator>
			<field-validator type="stringlength">
				<param name="maxLength">250</param>
				<message>标题最大250字符</message>
			</field-validator>
		</field>
	</validators>
	1.如果只想对指定的方法验证，可以把文件名改为XXXAction-方法名-validation.xml(方法名是指struts.xml对应action的name)
	2.或者在不需要验证的方法加入@SkipValidation
	注意：如果验证不通过，会自动跳到<result name="input">的页面，所以必须在struts.xml配置，另外各个方法不可以使用“doAdd()”这种名字，要改为“add()”
