				日期类使用
------------------------------------------------------------------------
//使当前日期增加1天
 public void incrementDay(){
  Calendar cal = Calendar.getInstance();
  cal.setTime(this.date);
  cal.set(Calendar.DATE,(cal.get(Calendar.DATE)+1));
  this.date = cal.getTime();
 }
 
 //返回当前日期的年份 
 public int getYear(){
  Calendar cal = Calendar.getInstance();
  cal.setTime(this.date);
  return cal.get(Calendar.YEAR);
 }
 
 //返回当前日期的月份 
 public int getMonth(){
  Calendar cal = Calendar.getInstance();
  cal.setTime(this.date);
  return cal.get(Calendar.MONTH);
 }
 
 // 返回当前日期的天数 
 public int getDay(){
  Calendar cal = Calendar.getInstance();
  cal.setTime(this.date);
  return cal.get(Calendar.DAY_OF_YEAR);
 }
 
 //以“年-月-日”格式返回当前日期的字符串表示
 public String toString(){
  DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
  return format.format(this.date);
 }
 ----------------------------------------------------------------------

						<many2one>出现LAZY问题
 ----------------------------------------------------------------------
Hibernate的Lazy初始化1:n关系时，必须保证是在同一个Session内部使用这个关系集合，不然Hiernate将抛出异常：org.hibernate.LazyInitializationException: failed to lazily initialize of.... 
两种处理方法：
一、设置lazy=false，此方法不再累述。
二、用OpenSessionInViewFilter过滤器，注意hibernateFilter过滤器和struts2过滤器在映射时的先后顺序。同时要配置事物处理，否则会导致session处于只读状态而不能做修改、删除的动作。
即在web.xml文件中如下配置：
     <!-- Spring ApplicationContext配置文件的加载目录。 -->   
 <context-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>classpath*:spring/applicationContext.xml</param-value>
 </context-param>

 <!-- 解决延迟加载的问题 -->
 <filter>
  <filter-name>hibernateFilter</filter-name>
  <filter-class>
   org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
  </filter-class>
 </filter>
 
 <!-- 继承Struts2的FilterDispatcher类，具备GBK等编码设定功能与struts2的action过滤功能。 -->
 <filter>
  <filter-name>struts2</filter-name>
  <filter-class>
   com.iman.nrms.opm.web.common.FilterDispatcher
  </filter-class>
  <init-param>
   <param-name>encoding</param-name>
   <param-value>GBK</param-value>
  </init-param>
 </filter>
 <filter>
         <filter-name>struts-cleanup</filter-name>
         <filter-class>
             org.apache.struts2.dispatcher.ActionContextCleanUp
         </filter-class>
     </filter>
 
 <filter-mapping>
  <filter-name>hibernateFilter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>
 
 <filter-mapping>
  <filter-name>struts2</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>
 
 <filter-mapping>
  <filter-name>struts-cleanup</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>

Hibernate 允许对关联对象、属性进行延迟加载，但是必须保证延迟加载的操作限于同一个 Hibernate Session 范围之内进行。如果 Service 层返回一个启用了延迟加载功能的领域对象给 Web 层，当 Web 层访问到那些需要延迟加载的数据时，由于加载领域对象的 Hibernate Session 已经关闭，这些导致延迟加载数据的访问异常。而Spring为我们提供的OpenSessionInViewFilter过滤器为我们很好的解决了这个问题。OpenSessionInViewFilter的主要功能是使每个请求过程绑定一个 Hibernate Session，即使最初的事务已经完成了，也可以在 Web 层进行延迟加载的操作。OpenSessionInViewFilter 过滤器将 Hibernate Session 绑定到请求线程中，它将自动被 Spring 的事务管理器探测到。所以 OpenSessionInViewFilter 适用于 Service 层使用HibernateTransactionManager 或 JtaTransactionManager 进行事务管理的环境，也可以用于非事务只读的数据操作中。 
request-->open session-->打开连接、开始事务-->持久操作-->渲染（关闭连接、session）-->response 其中一些过程省略了，不是很关心。


备注：还有一个就是
org.springframework.dao.InvalidDataAccessResourceUsageException: could not initialize a collection: [cn.gdpu.vo.Vote.items#3]; nested exception is org.hibernate.exception.SQLGrammarException: could not initialize a collection: [cn.gdpu.vo.Vote.items#3]
	是因为
	<set name="items" cascade="all" lazy="false" order-by="title asc">
			<key column="vote_id" />
			<one-to-many class="VoteItem" />
		</set>
		
		加了order-by="title asc"
		去掉就可以

 ----------------------------------------------------------------------
 
 